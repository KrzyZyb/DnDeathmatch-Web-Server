plugins {
	id 'org.springframework.boot' version '2.5.5'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}
apply plugin: 'war'

group = 'com.dndeathmatch'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.session:spring-session-core'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

test {
	useJUnitPlatform()
}

def webappDir = "../DnDeathmatchUi"

sourceSets {
	main {
		resources {
			srcDirs = ["$projectDir/src/main/resources"]

		}
//		output.resourcesDir = file("$buildDir/resources/static")
	}
}

task deleteStaticFolder(type: Delete) {
	println 'deleting static directory...'
	def backendStaticDir = "src/main/resources/static"
	def frontendStaticDir = "$webappDir/static"
	file( backendStaticDir ).list().each{
		f ->
			delete "${backendStaticDir}/${f}"
	}
	file(frontendStaticDir).list().each{
		f ->
			delete "${frontendStaticDir}/${f}"
	}
}

task copyFrontend(type: Copy) {
	println 'copying frontend...'
	def frontendStaticDir = "../DnDeathmatchUi/static"
	def backendTargetDir = "./src/main/resources/static"
	from "$frontendStaticDir"
	into "$backendTargetDir"
}

clean{
	println 'cleaning...'
	dependsOn "deleteStaticFolder"
}

processResources {
	println 'processing resources...'
	dependsOn "buildAngular"
	dependsOn "copyFrontend"
}

task buildAngular(type:Exec) {
	println 'building angular project...'
	// installAngular should be run prior to this task
	dependsOn "installAngular"
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	// Add task to the standard build group
	group = BasePlugin.BUILD_GROUP
	// ng doesn't exist as a file in windows -> ng.cmd
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "ng.cmd", "build"
	} else {
		commandLine "ng", "build"
	}
}

task installAngular(type:Exec) {
	println 'inside installAngular'
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "npm.cmd", "install"
	} else {
		commandLine "npm", "install"
	}
}
